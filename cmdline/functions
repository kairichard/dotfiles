#/* vim: set filetype=sh : */
git_info_ps1 ()
{
    if git rev-parse --git-dir >/dev/null 2>&1
    then
            gitver=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
            if git diff --quiet 2>/dev/null >&2
            then
                gitver="$Green$gitver$NC"
            else
                gitver="$Red!$gitver$NC"
            fi
    else
        return 0
    fi
    echo "$White at $gitver$NC"
}


function echo_red() {
    echo "$(tput setaf 1)$*$(tput sgr0)"
}

function echo_green() {
    echo "$(tput setaf 2)$*$(tput sgr0)"
}

function cs () {
	clear
	# only change directory if a directory is specified
	[ -n "${1}" ] && cd $1
	# filesystem stats
	echo "`df -hT .`"
	echo ""
	echo -n "[`pwd`:"
	# count files
	echo -n " <`find . -maxdepth 1 -mindepth 1 -type f | wc -l | tr -d '[:space:]'` files>"
	# count sub-directories
	echo -n " <`find . -maxdepth 1 -mindepth 1 -type d | wc -l | tr -d '[:space:]'` dirs/>"
	echo -n " <`find . -maxdepth 1 -mindepth 1 -type l | wc -l | tr -d '[:space:]'` links@>"
	# total disk space used by this directory and all subdirectories
	echo " <~`du -sh . 2> /dev/null | cut -f1`>]"
	ROWS=`stty size | cut -d' ' -f1`
	FILES=`find . -maxdepth 1 -mindepth 1 |
	wc -l | tr -d '[:space:]'`
	# if the terminal has enough lines, do a long listing
	if [ `expr "${ROWS}" - 6` -lt "${FILES}" ]; then
		ls -ACF
	else
		ls -hlAF
	fi
}

extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}
